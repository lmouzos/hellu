
package com.lambdami.hellu.gui;

import com.lambdami.hellu.searchsata.googleresults.DataFromCitations;
import com.lambdami.hellu.searchsata.googleresults.DataFromPublications;
import com.lambdami.hellu.searchsata.googleresults.Extract;
import com.lambdami.hellu.model.CitedPublication;
import com.lambdami.hellu.model.Publication;
import com.lambdami.hellu.processdata.charts.AxisChart;
import com.lambdami.hellu.processdata.charts.CreateDatasets;
import com.lambdami.hellu.processdata.compare.CitationType;
import com.lambdami.hellu.processdata.metrics.Metrics;
import com.lambdami.hellu.processdata.externalfiles.ExportFile;
import com.lambdami.hellu.searchsata.googleresults.GoogleRequest;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * @author Loukas Mouzos
 * contact : loukas.mouzos@gmail.com
 */

public class ApplicationForm extends javax.swing.JFrame {

    /**
     * Creates new form ApplicationForm
     */
    public ApplicationForm() {


        BufferedImage image = null;

        try {
            File imageFile = new File("/applicationlogo.png");
            image = ImageIO.read(imageFile);
        } catch (IOException ex) {
            Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setIconImage(image);
        initComponents();

        //window
        this.addWindowListener(new windowCloseListener());

        //listeners for menu
        this.addMenuListeners();

        //Search Panel listeners
        this.searchButton.addActionListener(new SearchButtonActionListener());
        this.searchButton.addKeyListener(new SearchButtonKeyListener());
        this.AuthorTextField.addKeyListener(new AuthorInputTextKeyListener());

        //creat Tables
        this.createMainTable();
        this.createHeteroCitationsTable();
        this.createSelfCitationsTable();


        //properties for components
        PrBar.setVisible(false);
        searchingLabel.setVisible(false);
        Labelous.setVisible(false);
        timeElapsedLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        SearchPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        AuthorTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        MainTable = new javax.swing.JScrollPane();
        publicationsTbl = new javax.swing.JTable();
        ForeignTable = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SelfCitationsTbl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        HeteroCitationsTbl = new javax.swing.JTable();
        SummaryPanel = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        numSCLabel = new javax.swing.JLabel();
        numHCLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        numPLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AuthorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        numCLabel = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        hindexHCLabel = new javax.swing.JLabel();
        gindexCLabel = new javax.swing.JLabel();
        arindexCLabel = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        gindexHCLabel = new javax.swing.JLabel();
        arindexHCLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        hindexCLabel = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        PDetailsYearLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        PDetailsAuthorsLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        PDetailsTitleLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        CDetailsTitleLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        CDetailsAuthorsLabel = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        CDetailsYearLabel = new javax.swing.JLabel();
        StatusPanel = new javax.swing.JPanel();
        Labelous = new javax.swing.JLabel();
        timeElapsedLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        PrBar = new javax.swing.JProgressBar();
        searchingLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ExportResultsMenuChoice = new javax.swing.JMenuItem();
        exitMenuChoice = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        publicationsChartMenuItem = new javax.swing.JMenuItem();
        heteroChartMenuItem = new javax.swing.JMenuItem();
        selfChartMenuItem = new javax.swing.JMenuItem();
        CitationsMenuItem = new javax.swing.JMenuItem();
        h = new javax.swing.JMenu();
        AboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("HL Application");
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Author's name:");

        AuthorTextField.setToolTipText(toolTipInputAuthor);

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButton.setText("Search");

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
                SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SearchPanelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SearchPanelLayout.setVerticalGroup(
                SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(AuthorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton))
                                .addContainerGap())
        );

        MainTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Publications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        publicationsTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {}
                },
                new String[]{

                }
        ));
        publicationsTbl.setRowHeight(20);
        publicationsTbl.setRowMargin(2);
        publicationsTbl.getTableHeader().setReorderingAllowed(false);
        MainTable.setViewportView(publicationsTbl);

        ForeignTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Citations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        ForeignTable.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Self-citations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        SelfCitationsTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {}
                },
                new String[]{

                }
        ));
        SelfCitationsTbl.setRowHeight(20);
        SelfCitationsTbl.setRowMargin(2);
        SelfCitationsTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(SelfCitationsTbl);

        ForeignTable.add(jScrollPane3);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hetero-citations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        HeteroCitationsTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {}
                },
                new String[]{

                }
        ));
        HeteroCitationsTbl.setMaximumSize(new java.awt.Dimension(200, 16));
        HeteroCitationsTbl.setRowHeight(20);
        HeteroCitationsTbl.setRowMargin(2);
        HeteroCitationsTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(HeteroCitationsTbl);

        ForeignTable.add(jScrollPane2);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Summary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jPanel10.setBackground(new java.awt.Color(239, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true)), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))));

        numSCLabel.setText("-");

        numHCLabel.setText("-");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Author:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Self-citations:");

        numPLabel.setText("-");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Publications:");

        AuthorLabel.setText("-");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Citations:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Hetero-citations:");

        numCLabel.setText("-");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(AuthorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numPLabel))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numSCLabel))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numHCLabel))
                                        .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(6, 6, 6)
                                                .addComponent(numCLabel)))
                                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
                jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(AuthorLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(numPLabel)
                                        .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(numCLabel))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(numSCLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numHCLabel)
                                        .addComponent(jLabel9))
                                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(239, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED))))));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("h-index:");

        hindexHCLabel.setText("-");

        gindexCLabel.setText("-");

        arindexCLabel.setText("-");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setText("Citations");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("AR-index:");

        gindexHCLabel.setText("-");

        arindexHCLabel.setText("-");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("g-index:");

        hindexCLabel.setText("-");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setText("Hetero-citations");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
                jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel12)
                                                .addGap(30, 30, 30)
                                                .addComponent(hindexCLabel)
                                                .addGap(86, 86, 86)
                                                .addComponent(hindexHCLabel))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel13)
                                                .addGap(30, 30, 30)
                                                .addComponent(gindexCLabel)
                                                .addGap(86, 86, 86)
                                                .addComponent(gindexHCLabel))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel14)
                                                .addGap(30, 30, 30)
                                                .addComponent(arindexCLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40)
                                                .addComponent(arindexHCLabel))
                                        .addGroup(jPanel11Layout.createSequentialGroup()
                                                .addGap(67, 67, 67)
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel22)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
                jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel21)
                                        .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12)
                                        .addComponent(hindexCLabel)
                                        .addComponent(hindexHCLabel))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel13)
                                        .addComponent(gindexCLabel)
                                        .addComponent(gindexHCLabel))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(arindexCLabel)
                                        .addComponent(arindexHCLabel))
                                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
                jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
                jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel13.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true))), "Publication", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 48));
        jPanel4.setLayout(new AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Year:");
        jPanel4.add(jLabel15, new AbsoluteConstraints(0, 0, -1, -1));

        PDetailsYearLabel.setText("-");
        jPanel4.add(PDetailsYearLabel, new AbsoluteConstraints(40, 0, 90, -1));

        jPanel2.add(jPanel4, new AbsoluteConstraints(10, 90, 190, 20));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Authors:");
        jPanel5.add(jLabel10, new AbsoluteConstraints(0, 0, -1, -1));

        PDetailsAuthorsLabel.setText("-");
        jPanel5.add(PDetailsAuthorsLabel, new AbsoluteConstraints(60, 0, -1, -1));

        jPanel2.add(jPanel5, new AbsoluteConstraints(10, 50, -1, 20));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new AbsoluteLayout());

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Title:");
        jPanel6.add(jLabel11, new AbsoluteConstraints(0, 0, -1, -1));

        PDetailsTitleLabel.setText("-");
        jPanel6.add(PDetailsTitleLabel, new AbsoluteConstraints(40, 0, -1, -1));

        jPanel2.add(jPanel6, new AbsoluteConstraints(10, 10, -1, 20));

        jScrollPane1.setViewportView(jPanel2);

        jPanel13.add(jScrollPane1);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true))), "Citation ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Title:");
        jPanel7.add(jLabel5, new AbsoluteConstraints(0, 0, -1, -1));

        CDetailsTitleLabel.setText("-");
        jPanel7.add(CDetailsTitleLabel, new AbsoluteConstraints(40, 0, -1, -1));

        jPanel3.add(jPanel7, new AbsoluteConstraints(10, 10, -1, 20));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Authors:");
        jPanel8.add(jLabel6, new AbsoluteConstraints(0, 0, -1, -1));

        CDetailsAuthorsLabel.setText("-");
        jPanel8.add(CDetailsAuthorsLabel, new AbsoluteConstraints(60, 0, -1, -1));

        jPanel3.add(jPanel8, new AbsoluteConstraints(10, 50, -1, 20));

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setPreferredSize(new java.awt.Dimension(100, 48));
        jPanel9.setLayout(new AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Year:");
        jPanel9.add(jLabel7, new AbsoluteConstraints(0, 0, -1, -1));

        CDetailsYearLabel.setText("-");
        jPanel9.add(CDetailsYearLabel, new AbsoluteConstraints(40, 0, 100, -1));

        jPanel3.add(jPanel9, new AbsoluteConstraints(10, 90, 170, 20));

        jScrollPane4.setViewportView(jPanel3);

        jPanel13.add(jScrollPane4);

        javax.swing.GroupLayout SummaryPanelLayout = new javax.swing.GroupLayout(SummaryPanel);
        SummaryPanel.setLayout(SummaryPanelLayout);
        SummaryPanelLayout.setHorizontalGroup(
                SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SummaryPanelLayout.createSequentialGroup()
                                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SummaryPanelLayout.setVerticalGroup(
                SummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Labelous.setText("Time Elapsed:");

        timeElapsedLabel.setText("-");

        searchingLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchingLabel.setText("searching...");

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
                StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(Labelous, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(timeElapsedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(118, 118, 118)
                                .addComponent(searchingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(12, 12, 12)
                                .addComponent(PrBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))
                        .addComponent(jSeparator2)
        );
        StatusPanelLayout.setVerticalGroup(
                StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Labelous)
                                        .addComponent(timeElapsedLabel)
                                        .addComponent(searchingLabel)
                                        .addComponent(PrBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(MainTable, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ForeignTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1039, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(SearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(SummaryPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(SearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MainTable, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ForeignTable, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SummaryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))
        );

        getContentPane().add(jPanel1);

        jMenu1.setText("File");

        ExportResultsMenuChoice.setText("Export Results");
        jMenu1.add(ExportResultsMenuChoice);

        exitMenuChoice.setText("Exit");
        jMenu1.add(exitMenuChoice);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        jMenu5.setText("Charts");

        publicationsChartMenuItem.setText("Publications per Year");
        jMenu5.add(publicationsChartMenuItem);

        heteroChartMenuItem.setText("Hetero-Citations per Year");
        jMenu5.add(heteroChartMenuItem);

        selfChartMenuItem.setText("Self-Citations per Year");
        jMenu5.add(selfChartMenuItem);

        CitationsMenuItem.setText("Combine Citations");
        jMenu5.add(CitationsMenuItem);

        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        h.setText("Help");

        AboutMenu.setText("About...");
        AboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuActionPerformed(evt);
            }
        });
        h.add(AboutMenu);

        jMenuBar1.add(h);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuActionPerformed
        AboutPanel about = new AboutPanel(this, true);
        about.setVisible(true);
    }//GEN-LAST:event_AboutMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                new ApplicationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenu;
    private javax.swing.JLabel AuthorLabel;
    private javax.swing.JTextField AuthorTextField;
    private javax.swing.JLabel CDetailsAuthorsLabel;
    private javax.swing.JLabel CDetailsTitleLabel;
    private javax.swing.JLabel CDetailsYearLabel;
    private javax.swing.JMenuItem CitationsMenuItem;
    private javax.swing.JMenuItem ExportResultsMenuChoice;
    private javax.swing.JPanel ForeignTable;
    private javax.swing.JTable HeteroCitationsTbl;
    private javax.swing.JLabel Labelous;
    private javax.swing.JScrollPane MainTable;
    private javax.swing.JLabel PDetailsAuthorsLabel;
    private javax.swing.JLabel PDetailsTitleLabel;
    private javax.swing.JLabel PDetailsYearLabel;
    private javax.swing.JProgressBar PrBar;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JTable SelfCitationsTbl;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JPanel SummaryPanel;
    private javax.swing.JLabel arindexCLabel;
    private javax.swing.JLabel arindexHCLabel;
    private javax.swing.JMenuItem exitMenuChoice;
    private javax.swing.JLabel gindexCLabel;
    private javax.swing.JLabel gindexHCLabel;
    private javax.swing.JMenu h;
    private javax.swing.JMenuItem heteroChartMenuItem;
    private javax.swing.JLabel hindexCLabel;
    private javax.swing.JLabel hindexHCLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel numCLabel;
    private javax.swing.JLabel numHCLabel;
    private javax.swing.JLabel numPLabel;
    private javax.swing.JLabel numSCLabel;
    private javax.swing.JMenuItem publicationsChartMenuItem;
    private javax.swing.JTable publicationsTbl;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchingLabel;
    private javax.swing.JMenuItem selfChartMenuItem;
    private javax.swing.JLabel timeElapsedLabel;
    // End of variables declaration//GEN-END:variables


    //global variables and methods
    protected Thread myThread;
    private double START;
    private double END;
    private List<CitedPublication> publications;

    private ArrayList<CitedPublication> keepIncludedOnly() {
        ArrayList<CitedPublication> pureList = new ArrayList<CitedPublication>();
        boolean isExcluded = false;
        for (int i = 0; i < publications.size(); i++) {

            for (int j = 0; j < ExcludeIndexes.size(); j++) {
                if (i == ExcludeIndexes.get(j)) {
                    isExcluded = true;
                }
            }
            if (isExcluded)
                isExcluded = false;
            else
                pureList.add(publications.get(i));
        }
        return pureList;
    }

    private void clearExcluded() {
        for (int i = 0; i < ExcludeIndexes.size(); i++) {
            for (int j = 0; j < ExcludeIndexes.size(); j++) {
                if (i == j) continue;
                if (ExcludeIndexes.get(i) == ExcludeIndexes.get(j)) {
                    ExcludeIndexes.remove(j);
                }
            }
        }
    }

    private class MainThread implements Runnable {

        @Override
        public void run() {
            try {
                startSearching();
            } catch (IOException ex) {
                Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void setTimeElapsed() {
        double timeElapsed = END - START;

        BigDecimal d = new BigDecimal(timeElapsed);

        BigDecimal seconds = d.divide(new BigDecimal(1000));
        BigDecimal hours = new BigDecimal(0), minutes = new BigDecimal(0);
        Formatter secondsFormat = new Formatter();

        //set hours 
        //seconds greater than 3600
        if (seconds.compareTo(new BigDecimal(3600)) == 1) {
            hours = seconds.divideToIntegralValue(new BigDecimal(3600));

            seconds = seconds.add(hours.multiply(new BigDecimal(3600)).negate());
        }
        //set minutes
        //seconds greater than 60
        if (seconds.compareTo(new BigDecimal(60)) == 1) {

            minutes = seconds.divideToIntegralValue(new BigDecimal(60));

            seconds = seconds.add(minutes.multiply(new BigDecimal(60)).negate());

        }
        secondsFormat.format("%.2f", seconds);

        System.out.println(hours.intValue() + " hrs " + minutes.intValue() + " min " + secondsFormat.toString() + " sec");

        timeElapsedLabel.setText(hours.intValue() + " hrs " + minutes.intValue() + " min " + secondsFormat.toString() + " sec");


    }

    private void setDefaultDetails() {
        PDetailsTitleLabel.setText("-");
        PDetailsAuthorsLabel.setText("-");
        PDetailsYearLabel.setText("-");

        jPanel2.repaint();
        jPanel2.revalidate();

        CDetailsTitleLabel.setText("-");
        CDetailsAuthorsLabel.setText("-");
        CDetailsYearLabel.setText("-");

        jPanel3.repaint();
        jPanel3.revalidate();
    }

    private void startSearching() throws IOException {
        clearTables(true);
        setDefaultDetails();
        searchingLabel.setText("Searching...");
        searchingLabel.repaint();
        searchButton.setEnabled(false);
        AuthorTextField.setEnabled(false);
        PrBar.setValue(0);
        PrBar.setVisible(true);
        searchingLabel.setVisible(true);
        Labelous.setVisible(false);
        timeElapsedLabel.setVisible(false);
        setDefaultSummary();
        repaintSummary();
        PrBar.setIndeterminate(true);

        START = System.currentTimeMillis();
        GoogleRequest request = new GoogleRequest(AuthorTextField.getText());
        List<String> lista = request.getPublications(true);
        if (lista.isEmpty()) {
            AuthorTextField.setEnabled(true);
            searchButton.setEnabled(true);
            PrBar.setIndeterminate(false);
            PrBar.setVisible(false);
            searchingLabel.setVisible(false);
            Labelous.setVisible(true);
            timeElapsedLabel.setVisible(true);
            JOptionPane.showMessageDialog(this, "Service unavailable", "Cannot process queries.", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //here we have the publications for the author with their data ( type, name, site, citations, authors.... )
        DataFromPublications dataP = new DataFromPublications(lista);
        publications = dataP.parseData();
        PrBar.setIndeterminate(false);
        int valueBar = 25;
        PrBar.setValue(valueBar);
        PrBar.repaint();
        //now we have to see the citations for each publication,
        //compare the authors between each citation and the specific publication and
        //export - separate citations (self-cited and hetero-cited publications)


        for (int i = 0; i < publications.size(); i++) {

            searchingLabel.setText("Retrieving data, " + (publications.size() - i) + " remaining");
            searchingLabel.repaint();
            List<Publication> citations = new ArrayList<Publication>();
            List<String> CitationList = new ArrayList<String>();

            GoogleRequest request2 = new GoogleRequest(publications.get(i).getHrefCitations());
            CitationList = request2.getPublications(false);
            if (CitationList != null) {
                //HttpParse.httpExportDataForCitations(CitationList, citations);
                DataFromCitations parse = new DataFromCitations(CitationList);
                citations = parse.parseData();

                //set correct year for citations
                Extract.cleanData(publications.get(i), citations);
                //here we can see the comparison for the authors
                CitationType compare = new CitationType(publications.get(i), citations);
                compare.setCitationType();
                publications.remove(i);
                publications.add(i, compare.getCitedPublication());
            }
            //updateTable
            Object[] o;
            if (publications.get(i).getYear() == 0) {
                o = new Object[]{true, publications.get(i).getTitle(), publications.get(i).printAuthors()
                        , "Unknown year", publications.get(i).getCitations()};
            } else
                o = new Object[]{true, publications.get(i).getTitle(), publications.get(i).printAuthors()
                        , publications.get(i).getYear(), publications.get(i).getCitations()};

            publicationsTblModel.addRow(o);

            valueBar += 75 / publications.size();
            PrBar.setValue(valueBar);
            PrBar.repaint();
            publicationsTbl.revalidate();
            publicationsTbl.repaint();
        }

        END = (double) System.currentTimeMillis();
        setTimeElapsed();
        AUTHOR = AuthorTextField.getText();

        AuthorTextField.setEnabled(true);
        searchButton.setEnabled(true);
        PrBar.setVisible(false);
        searchingLabel.setVisible(false);
        Labelous.setVisible(true);
        timeElapsedLabel.setVisible(true);
        ExcludeIndexes = new ArrayList<Integer>();
//        PublicationForSummary = Publications;
//        delete = new ModifyList(Publications);
        setSummary();
        repaintSummary();
    }

    //window application

    private void openExitChoiceForWindow(WindowEvent we) {

        JFrame frame = (JFrame) we.getSource();
        int result = JOptionPane.showConfirmDialog(
                frame,
                "Are you sure you want to exit the application?",
                "Exit Application",
                JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION)
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private class windowCloseListener extends WindowAdapter {

        @Override
        public void windowClosing(WindowEvent we) {
            openExitChoiceForWindow(we);
        }
    }

    //end window application

    //Menu Panel variable and methods

    private void openExportResults() {

        if (AUTHOR == null) {
            JOptionPane.showMessageDialog(this, "There isn't any author to export results.", "No author found.", JOptionPane.WARNING_MESSAGE);
        } else if (myThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Process on work", "Unable to export file.", JOptionPane.WARNING_MESSAGE);
        } else {
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setAcceptAllFileFilterUsed(false);

            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "bibTex file", "bib");
            FileNameExtensionFilter fil = new FileNameExtensionFilter("XML file", "xml");
            fileChooser.setFileFilter(filter);
            fileChooser.addChoosableFileFilter(fil);
            int option = fileChooser.showSaveDialog(this);

            if (option == JFileChooser.APPROVE_OPTION) {
                clearExcluded();
                ArrayList<CitedPublication> PureList = keepIncludedOnly();
                String selectedFile = fileChooser.getSelectedFile().getAbsolutePath();
                if (fileChooser.getFileFilter().getDescription().equals("XML file")) {
                    ExportFile.createXMLFILE(PureList, AUTHOR, selectedFile);
                } else {
                    ExportFile.createBibTexFile(PureList, selectedFile);
                }
            }
        }

    }

    private class ExportResultsActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openExportResults();
        }
    }

    private void openExitChoice() {
        int result = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to exit the application?",
                "Exit Application",
                JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION)
            System.exit(0);

    }

    private class ExitActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openExitChoice();
        }
    }

    private void openPublicationsChart() {

        if (AUTHOR == null) {
            JOptionPane.showMessageDialog(this, "There isn't any author to show chart.", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else if (myThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Process on work", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else {
            ArrayList<CitedPublication> PureList = keepIncludedOnly();
            int[][] result = CreateDatasets.createArrayDataYear(PureList, "PUBLICATION");
            String[] bars = new String[1];
            bars[0] = "Publication";
            AxisChart chart = new AxisChart("Publication chart", "Publication per Year", result, bars, "Publications");
            chart.pack();
            chart.setLocation(this.getX() + this.getHeight() / 2 - chart.getHeight() / 2, this.getY() + this.getWidth() / 2 - chart.getWidth() / 2);
            chart.setVisible(true);
        }


    }

    private class PublicationChartActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openPublicationsChart();
        }
    }

    private void openHeteroChart() {
        if (AUTHOR == null) {
            JOptionPane.showMessageDialog(this, "There isn't any author to show chart.", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else if (myThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Process on work", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else {
            clearExcluded();
            ArrayList<CitedPublication> PureList = keepIncludedOnly();
            int[][] result = CreateDatasets.createArrayDataYear(PureList, "HETERO");
            String[] bars = new String[1];
            bars[0] = "Hetero - citation";
            AxisChart chart = new AxisChart("Hetero-Citation chart", "Citations per Year", result, bars, "Citations");
            chart.pack();
            chart.setLocation(this.getX() + this.getHeight() / 2 - chart.getHeight() / 2, this.getY() + this.getWidth() / 2 - chart.getWidth() / 2);
            chart.setVisible(true);
        }
    }

    private class HeteroChartActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openHeteroChart();
        }
    }


    private void openSelfChart() {
        if (AUTHOR == null) {
            JOptionPane.showMessageDialog(this, "There isn't any author to show chart.", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else if (myThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Process on work", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else {
            clearExcluded();
            ArrayList<CitedPublication> PureList = keepIncludedOnly();
            int[][] result = CreateDatasets.createArrayDataYear(PureList, "SELF");
            String[] bars = new String[1];
            bars[0] = "Self - citation";
            AxisChart chart = new AxisChart("Self-Citation chart", "Citations per Year", result, bars, "Citations");
            chart.pack();
            chart.setLocation(this.getX() + this.getHeight() / 2 - chart.getHeight() / 2, this.getY() + this.getWidth() / 2 - chart.getWidth() / 2);

            chart.setVisible(true);
        }
    }

    private class SelfChartActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openSelfChart();
        }
    }

    private void openCombine() {
        if (AUTHOR == null) {
            JOptionPane.showMessageDialog(this, "There isn't any author to show chart.", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else if (myThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Process on work", "Unable to show chart.", JOptionPane.WARNING_MESSAGE);
        } else {
            clearExcluded();
            ArrayList<CitedPublication> PureList = keepIncludedOnly();
            int[][] result1 = CreateDatasets.createArrayDataYear(PureList, "SELF");
            int[][] result2 = CreateDatasets.createArrayDataYear(PureList, "HETERO");
            int[][] result = CreateDatasets.mergeData(result1, result2);
            String[] bars = new String[2];
            bars[0] = "Self - citation";
            bars[1] = "Hetero - citation";
            AxisChart chart = new AxisChart("Combine Citation chart", "Citations per Year", result, bars, "Citations");
            chart.pack();
            chart.setLocation(this.getX() + this.getHeight() / 2 - chart.getHeight() / 2, this.getY() + this.getWidth() / 2 - chart.getWidth() / 2);
            chart.setVisible(true);
        }
    }

    private class CombineCitationsActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            openCombine();
        }
    }

    private void addMenuListeners() {
        ExportResultsMenuChoice.addActionListener(new ExportResultsActionListener());
        exitMenuChoice.addActionListener(new ExitActionListener());
        publicationsChartMenuItem.addActionListener(new PublicationChartActionListener());
        heteroChartMenuItem.addActionListener(new HeteroChartActionListener());
        selfChartMenuItem.addActionListener(new SelfChartActionListener());
        CitationsMenuItem.addActionListener(new CombineCitationsActionListener());
    }

    //End Menu Panel 

    //Search Panel variables methods
    protected boolean Valid_Insert;
    final private String toolTipInputAuthor = "<html><body>Only letters are allowed.<br/>e.g. Mouzos L, or Mouzos Loukas.</body></html>";

    private class SearchButtonActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            runSearch();
        }
    }

    private class SearchButtonKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                runSearch();
            }
        }

    }

    private class AuthorInputTextKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                runSearch();
            }
        }

    }

    private void runSearch() {

        String input = AuthorTextField.getText();

        Valid_Insert = isInsertValid(input);


        if (!input.equals("")) {
            if (!Valid_Insert) {
                JOptionPane.showMessageDialog(this, "Only letters are allowed.", "Wrong Input", JOptionPane.WARNING_MESSAGE);
            } else {
                myThread = new Thread(new MainThread());
                myThread.start();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You must enter something!", "Error Entry", JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean isInsertValid(String text) {

        for (int i = 0; i < text.length(); i++) {
            if (!Character.isLetter(text.charAt(i)) && !Character.isSpaceChar(text.charAt(i))) {
                return false;
            }
        }
        return true;
    }
    //end Search Panel!!!!!!!!!!

    //Tables
    protected DefaultTableModel publicationsTblModel;
    protected DefaultTableModel heterocitationsTblModel;
    protected DefaultTableModel selfcitationsTblModel;
    private int lastSelectedPub;
    private int lastSelectedHCite;
    private int lastSelectedSCite;
    private final String selectSite = "<html><body>Press <b>Ctrl</b> + click<br/>"
            + "to go to website.</body></html>";

    private void createMainTable() {


        publicationsTblModel = new DefaultTableModel(new Object[][]{},
                new String[]{"Include ", "Title ", "Authors", "Year", "Cited by"}) {
            Class[] types = new Class[]{
                    java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    true, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        publicationsTbl.setModel(publicationsTblModel);
        // set columns preferences
        publicationsTbl.getColumnModel().getColumn(0).setResizable(false);
        publicationsTbl.getColumnModel().getColumn(0).setMaxWidth(60);
        publicationsTbl.getColumnModel().getColumn(1).setPreferredWidth(250);
        publicationsTbl.getColumnModel().getColumn(2).setPreferredWidth(250);
        publicationsTbl.getColumnModel().getColumn(3).setMaxWidth(60);
        publicationsTbl.getColumnModel().getColumn(3).setResizable(false);
        publicationsTbl.getColumnModel().getColumn(4).setMaxWidth(60);
        publicationsTbl.getColumnModel().getColumn(4).setResizable(false);
        ListSelectionModel listMod = publicationsTbl.getSelectionModel();
        listMod.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        publicationsTbl.addKeyListener(new TableKeyListener());
        publicationsTbl.addMouseListener(new TableMouseListener());
        listMod.addListSelectionListener(new TablePublicationListChanged());
        publicationsTbl.getModel().addTableModelListener(new PublicationsTableListener());
        publicationsTbl.addFocusListener(new TableFocusListener());
        publicationsTbl.setShowGrid(false);
        publicationsTbl.setName("Pub");
        publicationsTbl.setToolTipText(selectSite);
    }

    private void createHeteroCitationsTable() {


        heterocitationsTblModel = new DefaultTableModel(new Object[][]{},
                new String[]{"Title ", "Authors", "Year"}) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        HeteroCitationsTbl.setModel(heterocitationsTblModel);
        // set columns preferences
        HeteroCitationsTbl.getColumnModel().getColumn(0).setPreferredWidth(200);
        HeteroCitationsTbl.getColumnModel().getColumn(1).setPreferredWidth(200);
        HeteroCitationsTbl.getColumnModel().getColumn(2).setPreferredWidth(50);
        ListSelectionModel listMod = HeteroCitationsTbl.getSelectionModel();
        listMod.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listMod.addListSelectionListener(new TableHeteroListChanged());
        HeteroCitationsTbl.addKeyListener(new TableKeyListener());
        HeteroCitationsTbl.addMouseListener(new TableMouseListener());
        HeteroCitationsTbl.addFocusListener(new TableFocusListener());
        HeteroCitationsTbl.setShowGrid(false);
        HeteroCitationsTbl.setName("Hetero");
        HeteroCitationsTbl.setToolTipText(selectSite);
    }

    private void createSelfCitationsTable() {


        selfcitationsTblModel = new DefaultTableModel(new Object[][]{},
                new String[]{"Title", "Authors", "Year"}) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        SelfCitationsTbl.setModel(selfcitationsTblModel);
        // set columns preferences
        SelfCitationsTbl.getColumnModel().getColumn(0).setPreferredWidth(200);
        SelfCitationsTbl.getColumnModel().getColumn(1).setPreferredWidth(200);
        SelfCitationsTbl.getColumnModel().getColumn(2).setPreferredWidth(50);
        ListSelectionModel listMod = SelfCitationsTbl.getSelectionModel();
        listMod.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SelfCitationsTbl.addFocusListener(new TableFocusListener());
        SelfCitationsTbl.addKeyListener(new TableKeyListener());
        SelfCitationsTbl.addMouseListener(new TableMouseListener());
        listMod.addListSelectionListener(new TableSelfListChanged());
        SelfCitationsTbl.setShowGrid(false);
        SelfCitationsTbl.setName("Self");
        SelfCitationsTbl.setToolTipText(selectSite);
    }

    private void clearTables(boolean whole) {

        if (whole) {
            if (publicationsTblModel != null) {
                int rows = publicationsTblModel.getRowCount();
                if (rows > 0)
                    for (int i = rows - 1; i >= 0; i--)
                        publicationsTblModel.removeRow(i);
            }
        }
        if (heterocitationsTblModel != null) {
            int rows = heterocitationsTblModel.getRowCount();
            if (rows > 0)
                for (int i = rows - 1; i >= 0; i--)
                    heterocitationsTblModel.removeRow(i);
        }
        if (selfcitationsTblModel != null) {
            int rows = selfcitationsTblModel.getRowCount();
            if (rows > 0)
                for (int i = rows - 1; i >= 0; i--)
                    selfcitationsTblModel.removeRow(i);
        }
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hetero-citations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Self-citations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jScrollPane2.repaint();
        jScrollPane3.repaint();
        jScrollPane2.revalidate();
        jScrollPane3.revalidate();
    }


    //ctrl option for Open Site
    private class TableKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            JTable table = (JTable) e.getSource();
            if (e.isControlDown())
                table.setCursor(new Cursor(Cursor.HAND_CURSOR));

        }

        @Override
        public void keyReleased(KeyEvent e) {
            JTable table = (JTable) e.getSource();
            table.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }

    }

    //ctrl + click combination for Open Site
    private class TableMouseListener extends MouseAdapter {
//PROBLEM MAYBE

        @Override
        public void mouseClicked(MouseEvent e) {

            if (e.isControlDown()) {
                JTable table = (JTable) e.getSource();
                if (table.getSelectedRow() == -1) {
                    if (table.getName().equals("Pub"))
                        table.setRowSelectionInterval(lastSelectedPub, lastSelectedPub);
                    else if (table.getName().equals("Hetero"))
                        table.setRowSelectionInterval(lastSelectedHCite, lastSelectedHCite);
                    else table.setRowSelectionInterval(lastSelectedSCite, lastSelectedSCite);
                }
                /*GO TO HOMEPAGE CODE*/
                String url = "NO";
                if (table.getName().equals("Pub"))
                    url = publications.get(publicationsTbl.getSelectedRow()).getHrefPage();
                else if (table.getName().equals("Hetero"))
                    url = publications.get(lastSelectedPub).getHeteroCitations().get(table.getSelectedRow()).getHrefPage();
                else if (table.getName().equals("Self"))
                    url = publications.get(lastSelectedPub).getSelfCitations().get(table.getSelectedRow()).getHrefPage();

                if (url.startsWith("http")) {
                    URI uri;
                    try {
                        uri = new URI(url);
                        Desktop.getDesktop().browse(uri);
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ApplicationForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println(table.getName() + "    url:" + url);
                }

            }
        }
    }

    private void setDetailsForPublication(int index) {

        PDetailsTitleLabel.setText(publications.get(index).getTitle());
        PDetailsAuthorsLabel.setText(publications.get(index).printAuthors());
        if (publications.get(index).getYear() == 0)
            PDetailsYearLabel.setText("Unknown year");
        else
            PDetailsYearLabel.setText(publications.get(index).getYear() + "");

        jPanel2.repaint();
        jPanel2.revalidate();
    }

    private void showCitationsTable(int index) {


        //creat Tables
        clearTables(false);

        CitedPublication selectedP = publications.get(index);

        //fill tableModel for HETERO
        List<Publication> hetero = selectedP.getHeteroCitations();

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hetero-citations (" + hetero.size() + ")", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        for (int i = 0; i < hetero.size(); i++) {
            String year;
            if (hetero.get(i).getYear() == 0) year = "Unknown Year";
            else year = hetero.get(i).getYear() + "";

            Object[] o = new Object[]{hetero.get(i).getTitle()
                    , hetero.get(i).printAuthors(), year};
            heterocitationsTblModel.addRow(o);
        }

        //fill tableModel for SELF
        List<Publication> self = selectedP.getSelfCitations();
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Self-citations (" + self.size() + ")", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        for (int i = 0; i < self.size(); i++) {
            String year;
            if (self.get(i).getYear() == 0) year = "Unknown Year";
            else year = self.get(i).getYear() + "";

            Object[] o = new Object[]{self.get(i).getTitle()
                    , self.get(i).printAuthors(), year};
            selfcitationsTblModel.addRow(o);
        }
        setDetailsForPublication(index);
        jScrollPane2.repaint();
        jScrollPane3.repaint();
        jScrollPane2.revalidate();
        jScrollPane3.revalidate();
    }

    //select a row from the table
    private class TablePublicationListChanged implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {

            int selRow;

            if (!e.getValueIsAdjusting()) {
                setDefaultDetails();
                selRow = publicationsTbl.getSelectedRow();
                if (selRow == -1) return;
                lastSelectedPub = selRow;
                setDetailsForPublication(selRow);
                showCitationsTable(selRow);
                System.out.println("show " + selRow + "s citations");

            }
        }
    }

    private class TableHeteroListChanged implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {

            int selRow;

            if (!e.getValueIsAdjusting()) {

                selRow = HeteroCitationsTbl.getSelectedRow();
                if (selRow == -1) return;
                lastSelectedHCite = selRow;
                showDetailsForCitation(selRow, true);
                SelfCitationsTbl.clearSelection();

            }
        }
    }

    private class TableSelfListChanged implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {

            int selRow;

            if (!e.getValueIsAdjusting()) {


                selRow = SelfCitationsTbl.getSelectedRow();
                if (selRow == -1) return;
                lastSelectedSCite = selRow;
                showDetailsForCitation(selRow, false);
                HeteroCitationsTbl.clearSelection();

            }
        }
    }

    private void showDetailsForCitation(int index, boolean isHetero) {

        if (isHetero) {
            CDetailsTitleLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getHeteroCitations().get(index).getTitle());
            CDetailsAuthorsLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getHeteroCitations().get(index).printAuthors());
            if (publications.get(publicationsTbl.getSelectedRow()).getHeteroCitations().get(index).getYear() == 0)
                CDetailsYearLabel.setText("Unknown year");
            else
                CDetailsYearLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getHeteroCitations().get(index).getYear() + "");
        } else {
            CDetailsTitleLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getSelfCitations().get(index).getTitle());
            CDetailsAuthorsLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getSelfCitations().get(index).printAuthors());
            if (publications.get(publicationsTbl.getSelectedRow()).getSelfCitations().get(index).getYear() == 0)
                CDetailsYearLabel.setText("Unknown year");
            else
                CDetailsYearLabel.setText(publications.get(publicationsTbl.getSelectedRow()).getSelfCitations().get(index).getYear() + "");
        }
        jPanel3.repaint();
        jPanel3.revalidate();
    }

    class TableFocusListener implements FocusListener {

        @Override
        public void focusGained(FocusEvent e) {
            JTable OnTable = (JTable) e.getSource();
            OnTable.setSelectionBackground(new Color(51, 153, 255));
//            if ( OnTable.getName().equals("Pub") ){
//                        MainTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(Color.MAGENTA, 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Publications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
//            }
//            else 
//                ForeignTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(Color.MAGENTA, 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Publications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        }

        @Override
        public void focusLost(FocusEvent e) {

            JTable OffTable = (JTable) e.getSource();

//            if ( OffTable.getName().equals("Pub") ){
//                MainTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Publications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N              
//            
//            }else 
//                ForeignTable.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 2, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true), javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.windowBorder, 1, true), javax.swing.BorderFactory.createEtchedBorder()))), "Publications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N              
//            

            OffTable.setSelectionBackground(new Color(191, 205, 219));
        }
    }

    class PublicationsTableListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            if (myThread.isAlive()) return;
            if (e.getType() == TableModelEvent.DELETE) return;

            int selRow;
            boolean value;
            selRow = publicationsTbl.getSelectedRow();
            // get Table data
            TableModel tm = publicationsTbl.getModel();
            value = (Boolean) tm.getValueAt(selRow, 0);

            updateSummary(selRow, value);
            System.out.println("changed to " + value + " the " + selRow + " row");
        }

    }
    //end Tables 

    //summary Panel
    protected String AUTHOR;
    private ArrayList<Integer> ExcludeIndexes;

    private void setSummary() {


        int numHCite = 0;
        int numSCite = 0;
        clearExcluded();
        ArrayList<CitedPublication> PureList = keepIncludedOnly();
        for (int i = 0; i < PureList.size(); i++) {
            numHCite += PureList.get(i).getHeteroCitations().size();
            numSCite += PureList.get(i).getSelfCitations().size();
        }

        AuthorLabel.setText(AUTHOR);
        numPLabel.setText(PureList.size() + "");
        numCLabel.setText((numHCite + numSCite) + "");
        numHCLabel.setText(numHCite + "");
        numSCLabel.setText(numSCite + "");


        Metrics metrics = new Metrics(PureList);

        int h_indexCite = metrics.gethIndex(Metrics.CITATION_CHOICE);
        int h_indexHete = metrics.gethIndex(Metrics.HETERO_CHOICE);

        int g_indexCite = metrics.getgIndex(Metrics.CITATION_CHOICE);
        int g_indexHete = metrics.getgIndex(Metrics.HETERO_CHOICE);

        double ARindexCite = metrics.getARindex(Metrics.CITATION_CHOICE);
        double ARindexHete = metrics.getARindex(Metrics.HETERO_CHOICE);

        Formatter formatter1 = new Formatter();
        formatter1.format("%.3f", ARindexCite);

        Formatter formatter2 = new Formatter();
        formatter2.format("%.3f", ARindexHete);

        hindexCLabel.setText("" + h_indexCite);
        hindexHCLabel.setText("" + h_indexHete);
        gindexCLabel.setText("" + g_indexCite);
        gindexHCLabel.setText("" + g_indexHete);
        arindexCLabel.setText("" + formatter1);
        arindexHCLabel.setText("" + formatter2);


    }

    private void repaintSummary() {

        this.hindexCLabel.repaint();
        this.hindexHCLabel.repaint();
        this.gindexCLabel.repaint();
        this.gindexHCLabel.repaint();
        this.arindexCLabel.repaint();
        this.arindexHCLabel.repaint();
        AuthorLabel.repaint();
        numPLabel.repaint();
        numCLabel.repaint();
        numHCLabel.repaint();
        numSCLabel.repaint();
    }

    private void updateSummary(int index, boolean value) {

        if (value) {
            for (int i = 0; i < ExcludeIndexes.size(); i++) {
                if (index == ExcludeIndexes.get(i)) {
                    ExcludeIndexes.remove(i);
                    break;
                }
            }

        } else {
            ExcludeIndexes.add(index);
        }
        //revalidate Summary
        setSummary();
        repaintSummary();
    }

    private void setDefaultSummary() {
        AuthorLabel.setText("-");
        numPLabel.setText("-");
        numCLabel.setText("-");
        numHCLabel.setText("-");
        numSCLabel.setText("-");
        hindexCLabel.setText("-");
        hindexHCLabel.setText("-");
        gindexCLabel.setText("-");
        gindexHCLabel.setText("-");
        arindexCLabel.setText("-");
        arindexHCLabel.setText("-");
    }
    //end summary Panel

}
